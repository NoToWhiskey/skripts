on script load:
    delete {letters::*}
    wait 10 ticks
    set {_letters} to "Aa Bb Cc Dd Ee Ff Gg Hh Ii Jj Kk Ll Mm Nn Oo Pp Qq Rr Ss Tt Uu Vv Ww Xx Yy Zz"
    set {_pairedletters::*} to {_letters} split at " "
    loop {_pairedletters::*}:
        set {_pair::*} to loop-value split at ""
        set {_uppercase} to {_pair::1}
        set {_lowercase} to {_pair::2}
        set {letters::uppercase::%{_lowercase}%} to {_uppercase}
        set {letters::lowercase::%{_uppercase}%} to {_lowercase}
        add {_lowercase} to {letters::list::*}
    add "0", "1", "2", "3", "4", "5", "6", "7", "8" and "9" to {letters::list::*}

function String_ReturnTime(returnTime: string) :: object:
    if {_returnTime} contains "s":
        set {_time::*} to split {_returnTime} at "s"
        set {_number} to ({_time::1} parsed as an integer)
        return {_number} * 1
        stop
    if {_returnTime} contains "m":
        set {_time::*} to split {_returnTime} at "m"
        set {_number} to ({_time::1} parsed as an integer)
        return {_number} * 60
        stop
    if {_returnTime} contains "h":
        set {_time::*} to split {_returnTime} at "h"
        set {_number} to ({_time::1} parsed as an integer)
        return {_number} * 3600
        stop
    if {_returnTime} contains "d":
        set {_time::*} to split {_returnTime} at "d"
        set {_number} to ({_time::1} parsed as an integer)
        return {_number} * 86400
        stop
    if {_returnTime} contains "w":
        set {_time::*} to split {_returnTime} at "w"
        set {_number} to ({_time::1} parsed as an integer)
        return {_number} * 604800
        stop
    if {_returnTime} contains "mo":
        set {_time::*} to split {_returnTime} at "mo"
        set {_number} to ({_time::1} parsed as an integer)
        return {_number} * 2628000
        stop
    return false

function Sound_Play(plr: player, sound: string, pitch: number):
    play sound {_sound} at pitch {_pitch} to {_plr}

function Sound_Error(plr: player):
    play sound "ENTITY_VILLAGER_NO" for {_plr}

function Sound_Success(plr: player):
    play sound "BLOCK_NOTE_BLOCK_BELL" for {_plr}

function Sound_Prompt(plr: player):
    play sound "BLOCK_NOTE_BLOCK_PLING" for {_plr}

function Sound_ErrorAll():
    loop all players:
        play sound "ENTITY_VILLAGER_NO" for loop-player

function Sound_SuccessAll():
    loop all players:
        play sound "BLOCK_NOTE_BLOCK_BELL" for loop-player

function Sound_PromptAll():
    loop all players:
        play sound "BLOCK_NOTE_BLOCK_PLING" for loop-player

function Number_MakeNegative(num: number) :: number:
    return ({_num} * -1)

function Integer_FormatInteger(n: number) :: string:
    set {_l::*} to split "k|M|B|T|Qn|Qi|Sx" at "|"
    set {_i} to min(floor(log({_n})/3), size of {_l::*})
    return "%{_n}%" if {_i} <= 0
    set {_i2} to 1000^{_i}
    return "%{_n}/{_i2}%%{_l::%{_i}%}%"

function String_CreateRandom(amount: integer) :: string:
    set {_list::*} to ""
    loop {_amount} times:
        set {_random} to random element of {letters::list::*}
        {_list::*} does not contain {_random}
        add {_random} to {_list::*}
    return (join {_list::*} with "")

function Location_MakeFancierLocation(loc: location) :: string:
    return "%x-pos of {_loc}%, %y-pos of {_loc}%, %z-pos of {_loc}%, World: %world of {_loc}%"

function Staff_AlertStaff(message: string):
    loop all players:
        loop-player has permission "staff.alerts_see"
        send "&5&lALERTS &8| &f%{_message}%" to loop-player

function Utils_BetterBroadcast(message: string):
    loop all players:
        send {_message} to loop-player

function Time_MakeFancierTime(time: timespan) :: string:
    set {_fancier_time} to "%{_time}%"
    replace " seconds" in {_fancier_time} with "s"
    replace " second" in {_fancier_time} with "s"
    replace " minutes" in {_fancier_time} with "m"
    replace " minute" in {_fancier_time} with "m"
    replace " weeks" in {_fancier_time} with "w"
    replace " week" in {_fancier_time} with "w"
    replace " months" in {_fancier_time} with "mo"
    replace " month" in {_fancier_time} with "mo"
    replace "and" in {_fancier_time} with " "
    return {_fancier_time}

function Inventory_FillInventory(plr: player, amount: integer):
    set {_slot} to 0
    loop {_amount} times:
        format gui slot {_slot} of {_plr} with gray stained glass pane
        add 1 to {_slot}
        format gui slot {_slot} of {_plr} with gray stained glass pane
        add 1 to {_slot}

function Random_ActuallyRandom(chances: numbers, ids: objects, sum: number = 0) :: object:
    if {_sum} = 0:
        loop {_chances::*}:
            add loop-value to {_sum}
    set {_random} to random number between 0 and {_sum}
    set {_a} to 0
    loop {_chances::*}:
        add 1 to {_n}
        add loop-value to {_current}
        {_random} <= {_current}
        return {_n}th element of {_ids::*}

function Information_ProgressBar(int: integer, max: integer, barsize: integer) :: string:
    stop if {_int} < 0
    stop if {_max} < 0
    stop if {_barsize} < 1
    loop {_barsize} times:
        set {_bar} to "%{_bar} ? """"%|"
    return "&8&l[&a%((first floor({_barsize} * ({_int}/{_max})) characters of {_bar}) ? """")%&c%(last {_barsize} - floor({_barsize} * ({_int}/{_max})) characters of {_bar}) ? """"%&8&l]"